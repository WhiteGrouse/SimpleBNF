<mangled-name>::=_Z<encoding>
<encoding>::=<function name><bare-function-type>
<encoding>::=<data name>
<encoding>::=<special-name>
<name>::=<nested-name>
<name>::=<unscoped-name>
<name>::=<unscoped-template-name><template-args>
<name>::=<local-name>
<unscoped-name>::=<unqualified-name>
<unscoped-name>::=St<unqualified-name>
<unscoped-template-name>::=<unscoped-name>
<unscoped-template-name>::=<substitution>
<nested-name>::=N[<CV-qualifiers>][<ref-qualifier>]<prefix><unqualified-name>E
<nested-name>::=N[<CV-qualifiers>][<ref-qualifier>]<template-prefix><template-args>E
<prefix>::=<unqualified-name>
<prefix>::=<prefix><unqualified-name>
<prefix>::=<template-prefix><template-args>
<prefix>::=<template-param>
<prefix>::=<delctype>
<prefix>::=<prefix><data-member-prefix>
<prefix>::=<substitution>
<template-prefix>::=<template unqualified-name>
<template-prefix>::=<prefix><template unqualified-name>
<template-prefix>::=<template-param>
<template-prefix>::=<substitution>
<unqualified-name>::=<operator-name>[<abi-tags>]
<unqualified-name>::=<ctor-dtor-name>
<unqualified-name>::=<source-name>
<unqualified-name>::=<unnamed-type-name>
<unqualified-name>::=DC<source-name>+E
#<source-name>
<abi-tags>::=<abi-tag>+
<abi-tag>::=B<source-name>
#<number>
<seq-id>::=<seq-id_charset>+
<seq-id_charset>::=0
<seq-id_charset>::=1
<seq-id_charset>::=2
<seq-id_charset>::=3
<seq-id_charset>::=4
<seq-id_charset>::=5
<seq-id_charset>::=6
<seq-id_charset>::=7
<seq-id_charset>::=8
<seq-id_charset>::=9
<seq-id_charset>::=A
<seq-id_charset>::=B
<seq-id_charset>::=C
<seq-id_charset>::=D
<seq-id_charset>::=E
<seq-id_charset>::=F
<seq-id_charset>::=G
<seq-id_charset>::=H
<seq-id_charset>::=I
<seq-id_charset>::=J
<seq-id_charset>::=K
<seq-id_charset>::=L
<seq-id_charset>::=M
<seq-id_charset>::=N
<seq-id_charset>::=O
<seq-id_charset>::=P
<seq-id_charset>::=Q
<seq-id_charset>::=R
<seq-id_charset>::=S
<seq-id_charset>::=T
<seq-id_charset>::=U
<seq-id_charset>::=V
<seq-id_charset>::=W
<seq-id_charset>::=X
<seq-id_charset>::=Y
<seq-id_charset>::=Z
<operator-name>::=nw
<operator-name>::=na
<operator-name>::=dl
<operator-name>::=da
<operator-name>::=ps
<operator-name>::=ng
<operator-name>::=ad
<operator-name>::=de
<operator-name>::=co
<operator-name>::=pl
<operator-name>::=mi
<operator-name>::=ml
<operator-name>::=dv
<operator-name>::=rm
<operator-name>::=an
<operator-name>::=or
<operator-name>::=eo
<operator-name>::=aS
<operator-name>::=pL
<operator-name>::=mI
<operator-name>::=mL
<operator-name>::=dV
<operator-name>::=rM
<operator-name>::=aN
<operator-name>::=oR
<operator-name>::=eO
<operator-name>::=ls
<operator-name>::=rs
<operator-name>::=lS
<operator-name>::=rS
<operator-name>::=eq
<operator-name>::=ne
<operator-name>::=lt
<operator-name>::=gt
<operator-name>::=le
<operator-name>::=ge
<operator-name>::=ss
<operator-name>::=nt
<operator-name>::=aa
<operator-name>::=oo
<operator-name>::=pp
<operator-name>::=mm
<operator-name>::=cm
<operator-name>::=pm
<operator-name>::=pt
<operator-name>::=cl
<operator-name>::=ix
<operator-name>::=qu
<operator-name>::=cv<type>
<operator-name>::=li<source-name>
<operator-name>::=v<digit><source-name>
<digit>::=0
<digit>::=1
<digit>::=2
<digit>::=3
<digit>::=4
<digit>::=5
<digit>::=6
<digit>::=7
<digit>::=8
<digit>::=9
<special-name>::=TV<type>
<special-name>::=TT<type>
<special-name>::=TI<type>
<special-name>::=TS<type>
<special-name>::=T<call-offet><base encoding>
<call-offet>::=h<nv-offset>_
<call-offet>::=v<v-offset>_
<nv-offset>::=<offset number>
<v-offset>::=<offset number>
<special-name>::=Tc<call-offet><call-offet><base encoding>
<ctor-dtor-name>::=C1
<ctor-dtor-name>::=C2
<ctor-dtor-name>::=C3
<ctor-dtor-name>::=D0
<ctor-dtor-name>::=D1
<ctor-dtor-name>::=D2
<special-name>::=GV<object name>
<special-name>::=GR<object name>
<special-name>::=GR<object name><seq-id>_
<special-name>::=GTt<encoding>
<type>::=<builtin-type>
<type>::=<qualified-type>
<type>::=<function-type>
<type>::=<class-enum-type>
<type>::=<array-type>
<type>::=<pointer-to-member-type>
<type>::=<template-param>
<type>::=<template-template-param><template-args>
<type>::=<delctype>
<type>::=P<type>
<type>::=R<type>
<type>::=O<type>
<type>::=C<type>
<type>::=G<type>
<type>::=<substitution>
<qualified-type>::=<qualifiers><type>
<qualifiers>::=<extended-qualifier>*<CV-qualifiers>
<extended-qualifier>::=U<source-name>[<template-args>]
<CV-qualifiers>::=[r][V][K]
<ref-qualifier>::=R
<ref-qualifier>::=O
<builtin-type>::=v
<builtin-type>::=w
<builtin-type>::=b
<builtin-type>::=c
<builtin-type>::=a
<builtin-type>::=h
<builtin-type>::=s
<builtin-type>::=t
<builtin-type>::=i
<builtin-type>::=j
<builtin-type>::=l
<builtin-type>::=m
<builtin-type>::=x
<builtin-type>::=y
<builtin-type>::=n
<builtin-type>::=o
<builtin-type>::=f
<builtin-type>::=d
<builtin-type>::=e
<builtin-type>::=g
<builtin-type>::=z
<builtin-type>::=Dd
<builtin-type>::=De
<builtin-type>::=Df
<builtin-type>::=Dh
<builtin-type>::=DF<number>_
<builtin-type>::=Di
<builtin-type>::=Ds
<builtin-type>::=Da
<builtin-type>::=Dc
<builtin-type>::=Dn
<builtin-type>::=u<source-name>
<function-type>::=[<CV-qualifiers>][<exception-spec>][Dx]F[Y]<bare-function-type>[<ref-qualifier>]E
<bare-function-type>::=<signature type>+
<exception-spec>::=Do
<exception-spec>::=DO
<exception-spec>::=Dw<type>+E
<type>::=Dp<type>
<delctype>::=Dt<expression>E
<delctype>::=DT<expression>E
<class-enum-type>::=<name>
<class-enum-type>::=Ts<name>
<class-enum-type>::=Tu<name>
<class-enum-type>::=Te<name>
<unnamed-type-name>::=Ut[<number>]_
<array-type>::=A<number>_<element type>
<array-type>::=A[<dimension expression>]_<element type>
<pointer-to-member-type>::=M<class type><member type>
<template-param>::=T_
<template-param>::=T<number>_
<template-template-param>::=<template-param>
<template-template-param>::=<substitution>
<function-param>::=fp<top-level CV-qualifiers>_
<function-param>::=fp<top-level CV-qualifiers><number>_
<function-param>::=fL<number>p<top-level CV-qualifiers>_
<function-param>::=fL<number>p<top-level CV-qualifiers><number>_
<template-args>::=I<template-arg>+E
<template-arg>::=<type>
<template-arg>::=X<expression>E
<template-arg>::=<expr-primary>
<template-arg>::=J<template-arg>*E
<expression>::=<unary operator-name><expression>
<expression>::=<binary operator-name><expression><expression>
<expression>::=<tennary operator-name><expression><expression><expression>
<expression>::=pp_<expression>
<expression>::=mm_<expression>
<expression>::=cl<expression>+E
<expression>::=cv<type><expression>
<expression>::=cv<type>_<expression>*E
<expression>::=tl<type><braced-expression>*E
<expression>::=il<braced-expression>*E
<expression>::=[gs]nw<expression>*_<type>E
<expression>::=[gs]nw<expression>*_<type><initializer>
<expression>::=[gs]na<expression>*_<type>E
<expression>::=[gs]na<expression>*_<type><initializer>
<expression>::=[gs]dl<expression>
<expression>::=[gs]da<expression>
<expression>::=dc<type><expression>
<expression>::=sc<type><expression>
<expression>::=cc<type><expression>
<expression>::=rc<type><expression>
<expression>::=ti<type>
<expression>::=te<expression>
<expression>::=st<type>
<expression>::=sz<expression>
<expression>::=at<type>
<expression>::=az<expression>
<expression>::=nx<expression>
<expression>::=<template-param>
<expression>::=<function-param>
<expression>::=dt<expression><unresolved-name>
<expression>::=pt<expression><unresolved-name>
<expression>::=ds<expression><expression>
<expression>::=sZ<template-param>
<expression>::=sZ<function-param>
<expression>::=sP<template-arg>*E
<expression>::=sp<expression>
<expression>::=tw<expression>
<expression>::=tr
<expression>::=<unresolved-name>
<expression>::=<expr-primary>
<unresolved-name>::=[gs]<base-unresolved-name>
<unresolved-name>::=sr<unresolved-type><base-unresolved-name>
<unresolved-name>::=srN<unresolved-type><unresolved-qualifier-level>+E<base-unresolved-name>
<unresolved-name>::=[gs]sr<unresolved-qualifier-level>+E<base-unresolved-name>
<unresolved-type>::=<template-param>[<template-args>]
<unresolved-type>::=<delctype>
<unresolved-type>::=<substitution>
<unresolved-qualifier-level>::=<simple-id>
<simple-id>::=<source-name>[<template-args>]
<base-unresolved-name>::=<simple-id>
<base-unresolved-name>::=on<operator-name>
<base-unresolved-name>::=on<operator-name><template-args>
<base-unresolved-name>::=dn<destructor-name>
<destructor-name>::=<unresolved-type>
<destructor-name>::=<simple-id>
<expr-primary>::=L<type><value number>E
#<expr-primary>::=L<type><value float>E
<expr-primary>::=L<string type>E
<expr-primary>::=L<nullptr type>E
<expr-primary>::=L<pointer type>0E
#<expr-primary>::=L<type><real-part float>_<imag-part float>E
<expr-primary>::=L_Z<encoding>E
#<float>
<braced-expression>::=<expression>
<braced-expression>::=di<field source-name><braced-expression>
<braced-expression>::=dx<index expression><braced-expression>
<braced-expression>::=dX<range begin expression><range end expression><braced-expression>
<initializer>::=pi<expression>*E
<local-name>::=Z<function encoding>E<entity name>[<discriminator>]
<local-name>::=Z<function encoding>Es[<discriminator>]
<discriminator>::=_<number>
<discriminator>::=__<number>_
<unnamed-type-name>::=Ut[<number>]_
<unnamed-type-name>::=<closure-type-name>
<closure-type-name>::=Ul<lambda-sig>E[<number>]_
<lambda-sig>::=<parameter type>+
<local-name>::=Z<function encoding>Ed[<number>]_<entity name>
<data-member-prefix>::=<member source-name>[<template-args>]M
<substitution>::=S<seq-id>*_
<substitution>::=St
<substitution>::=Sa
<substitution>::=Sb
<substitution>::=Ss
<substitution>::=Si
<substitution>::=So
<substitution>::=Sd
<name>::=St<unqualified-name>